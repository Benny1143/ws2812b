module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  // We test on an 8x8 WS2812B matrix, please change as required
  // We shall always assume that COLUMN_DIMENSION and ROW_DIMENSION is a 2^x
  const COLUMN_DIMENSION = 8; // how many "columns"? 
  const ROW_DIMENSION = 8; // how many "rows"?

  const PIXEL_COUNT = COLUMN_DIMENSION *  ROW_DIMENSION;   
  const ENCODING_AMOUNT = 4; // how many different encodings are used? As example, we use 4 colors, hence ENCODING_AMOUNT is 4
  
  // OFF WHITE (11), DIM BLUE (10), DIM RED (01), OFF(00)
  const LEDCOLOR = {24h0F0F0F, 24h010000, 24h000100, 24h000000};
  const PLAYER1_COLOR = b01;
  const PLAYER2_COLOR = b10;

  // // WHITE (11), BLUE (10), RED (01), GREEN (00)
  // const LEDCOLOR = {24hFFFFFF, 24hFF0000, 24h00FF00, 24h0000FF}; 
  
  sig rst; // reset signal

  // the data_ram, this is a custom data_ram for demonstration purposes
  // along with custom "player location"
  data_ram ram(#ROW_DIMENSION(ROW_DIMENSION), #ENCODING_AMOUNT(ENCODING_AMOUNT), #COLUMN_DIMENSION(COLUMN_DIMENSION), .clk(clk), .rst(rst));
  
  // 0,0 is assumed to be at the top right of LED matrix: Check this with your matrix orientation
  // right ---> x --
  // left ---> x++ 
  // down ---> y++ 
  dff player1_x_pos[3](.clk(clk), #INIT(000), .rst(rst));
  dff player1_y_pos[3](.clk(clk), #INIT(000), .rst(rst));

  dff player2_x_pos[3](.clk(clk), #INIT(111), .rst(rst));
  dff player2_y_pos[3](.clk(clk), #INIT(111), .rst(rst));

  dff update_ram_flag(.clk(clk), #INIT(0), .rst(rst));

  dff playerMode(.clk(clk), #INIT(1), .rst(rst)); // 0 - player 1, 1 - player 2
  
  ws2812b_writer led_strip(#PIXEL_COUNT(PIXEL_COUNT), .clk(clk), .rst(rst)); 
  fsm state(.clk(clk), .rst(rst)) = {IDLE, UPDATE_RAM, REFRESH};
  
  reverser index_reverser(#COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));
  
  // user inputs 
  button_conditioner movement_button[4](.clk(clk));
  edge_detector movement_button_edge[4](.clk(clk), #RISE(1), #FALL(0));
  button_conditioner start_button(.clk(clk));
  edge_detector start_button_edge(.clk(clk), #RISE(1), #FALL(0));
  
  digit_to_seven_seg convert1(.clk(clk),.rst(rst));
  digit_to_seven_seg convert2(.clk(clk),.rst(rst));
 
  multi_seven_seg seg(.clk(clk),.rst(rst)); 
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    ram.address = 0;        // address 0 selected by default

    seg.values = {8b0,8b0,8b0,8b0};
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
    movement_button.in = c{io_button[4], io_button[3], io_button[2], io_button[0]}; // up, down, left, right
    movement_button_edge.in = movement_button.out;
    
    start_button.in = io_button[1]; // use this button to enable reverse
    start_button_edge.in = start_button.out;

    ram.playerMode = playerMode.q;

    if(playerMode.q == b0) {
      ram.playerColor = PLAYER1_COLOR;
      ram.player_x_pos = player1_x_pos.q; 
      ram.player_y_pos = player1_y_pos.q;
    } else {
      ram.playerColor = PLAYER2_COLOR;
      ram.player_x_pos = player2_x_pos.q; 
      ram.player_y_pos = player2_y_pos.q;
    }
    
    // the sample matrix we use has top RIGHT as 0,0
    // check player movement update 
    // we assume a player is a 2x2 square, the coordinate stored in player_x_pos and player_y_pos indicate top right dot 
    if (movement_button_edge.out[0]){ // up
      if(playerMode.q == b0) { //Player 1
        if ((|player1_y_pos.q)&&!(((player1_y_pos.q - 1) == player2_y_pos.q) && (player1_x_pos.q == player2_x_pos.q))){
         player1_y_pos.d = player1_y_pos.q - 1;
        }
      } else if(playerMode.q == b1){ //Player 2
        if ((|player2_y_pos.q)&&!(((player2_y_pos.q - 1) == player1_y_pos.q) && (player1_x_pos.q == player2_x_pos.q))){
         player2_y_pos.d = player2_y_pos.q - 1;
        }
      }
    }
    
    if (movement_button_edge.out[1]){ // down
      if(playerMode.q == b0) { //Player 1
        if ((player1_y_pos.q < COLUMN_DIMENSION-1)&&!(((player1_y_pos.q + 1) == player2_y_pos.q) && (player1_x_pos.q == player2_x_pos.q))){
          player1_y_pos.d = player1_y_pos.q + 1;
        }
      } else if(playerMode.q == b1){ //Player 2
        if ((player2_y_pos.q < COLUMN_DIMENSION-1)&&!(((player2_y_pos.q + 1) == player1_y_pos.q) && (player1_x_pos.q == player2_x_pos.q))){
          player2_y_pos.d = player2_y_pos.q + 1;
        }
      }
    }
    
    if (movement_button_edge.out[2]){ // left
      if(playerMode.q == b0) { //Player 1
        if ((player1_x_pos.q < COLUMN_DIMENSION-1)&&!((player1_y_pos.q == player2_y_pos.q) && (player1_x_pos.q + 1 == player2_x_pos.q))){
          player1_x_pos.d = player1_x_pos.q + 1;
        }
      } else if(playerMode.q == b1){ //Player 2
        if ((player2_x_pos.q < COLUMN_DIMENSION-1)&&!((player1_y_pos.q == player2_y_pos.q) && (player2_x_pos.q + 1 == player1_x_pos.q))){
          player2_x_pos.d = player2_x_pos.q + 1;
        }
      }
    }

    if (movement_button_edge.out[3]){ // right
      if(playerMode.q == b0) { //Player 1
        if ((|player1_x_pos.q)&&!((player1_y_pos.q == player2_y_pos.q) && ((player1_x_pos.q - 1) == player2_x_pos.q))){
          player1_x_pos.d = player1_x_pos.q - 1;
        }
      } else if(playerMode.q == b1){ //Player 2
        if ((|player2_x_pos.q)&&!((player1_y_pos.q == player2_y_pos.q) && ((player2_x_pos.q - 1) == player1_x_pos.q))){
          player2_x_pos.d = player2_x_pos.q - 1;
        }
      }
    }

    if(start_button_edge.out) {
      playerMode.d = playerMode.q + 1;
    }
    
    // update the flag 
    if (|movement_button_edge.out | start_button_edge.out){
       update_ram_flag.d = 1;
    }
    
    // connect player location to RAM, set update as 0 initially
    ram.update = 0; 
    
    led_strip.update = 0; // do not refresh by default
    led_strip.clear = 0; // do not clear by default
    
    // connect reverser to led_strip 
    index_reverser.original_pixel_address = led_strip.pixel_address;
    index_reverser.activate = 1; // we use led matrix here as example, always activate index reverser
    
    ram.address = 0; 

    // use io_dip[2:0]  to encode 12 unique pixel values at most (24 bits)
    case (state.q){
      state.UPDATE_RAM:
        // when ram is ready, and led is idling at RESET state, we load the strip
        if (ram.ready & led_strip.reset){
          // clear flag 
          update_ram_flag.d = 0;
          state.d = state.REFRESH;
          ram.address = index_reverser.effective_pixel_address;
          led_strip.update = 1;
        }
        led[1:0] = b10;
      state.REFRESH:
        // if at the last FPGA clock cycle for this bit, advance the address first because our RAM needs 1 additional clock cycle to work
        if (led_strip.next_pixel){
          index_reverser.original_pixel_address = led_strip.pixel_address + 1;
        }

        // pass this to ram 
        ram.address = index_reverser.effective_pixel_address;
        
        // wait until we are all done in updating our LED;
        if (led_strip.done){
            state.d = state.IDLE;
        }
        led[1:0] = b11;
        
     state.IDLE:
        if (update_ram_flag.q){ // if there's movement update or start button pressed
            state.d = state.UPDATE_RAM;
            ram.update = 1;  // send update signal to ram first, dont clear the update flag yet 
        }
        led[1:0] = b01;

        // test reverser 
        index_reverser.original_pixel_address = ram.debug_address_pointer;
    }
    
    led_strip.color = LEDCOLOR[ram.out_encoding]; 
    outled = led_strip.led;
    
    // debug 
    io_led[0] = c{player1_y_pos.q, player1_x_pos.q};
   
    //io_led[2] = ram.debug_address_pointer;
    io_led[2] = ram.out_counter;
    io_led[1] = index_reverser.effective_pixel_address;
   
    io_led[2][7] = update_ram_flag.q;
    led[7:5] = ram.debug_data;

    convert1.update = ram.update_display;
    convert2.update = ram.update_display;
    convert1.digit = ram.out_player1_score;
    convert2.digit = ram.out_player2_score;

    seg.values = {convert1.out[1],convert1.out[0], convert2.out[1],convert2.out[0]};
  }
}