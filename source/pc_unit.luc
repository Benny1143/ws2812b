module pc_unit (
    input clk,  // clock
    input rst,  // reset
    input slowclk, // slowclock to advance pc
    input id[16],
    input pcsel[3],
    input reg_data_1[32],
    output pc_4[32],
    output pc_4_sxtc[32],
    output pcsel_out[32], // for debug only, does not exist in pc_unit
    output ia[32]
  ) {

  dff pc[32](#INIT(0),.clk(clk)); // PC Register

  sig pcsel_out_sig[32];
  sig pc_4_sxtc_32_sig[32];
  sig pc_4_sxtc_sig[32];
  sig pc_4_sig[32];
  
  always {
  
    // initial setups to silence output compilation errors
    pc_4_sig = 0;
    pc_4_sxtc_sig = 0;
    pcsel_out_sig = 0;
    
    // increment pc by 4
    pc_4_sig = c{pc.q[31], pc.q[30:0] + 4};
    
    // TASK 4
    // shift-and-add pc by 4
    pc_4_sxtc_32_sig  = pc_4_sig + 4*c{16x{id[15]}, id}; // implement intermediary signal: pc + 4 + SXT(C)
    pc_4_sxtc_sig = c{pc.q[31], pc_4_sxtc_32_sig[30:0]};// preserve the supervisor bit 
    
    // TASK 1 
    // PCSEL mux    
    case (pcsel[1:0]){
      b00: pcsel_out_sig = pc_4_sig; // PC+4
      b01: pcsel_out_sig = pc_4_sxtc_sig; // PC+4+4*SXTC
      b10: pcsel_out_sig = c{pc.q[31] & reg_data_1[31], reg_data_1[30:0]}; // JT
      b11: pcsel_out_sig = 32h80000004; // ILLOP
      default: 
        pcsel_out_sig = pc.q;
    }
    
    case (pcsel[2]){
      b0: pcsel_out_sig = pcsel_out_sig;
      b1: pcsel_out_sig = 32h80000008; // XAddr
      default: 
        pcsel_out_sig = 0;
    }
    
    // advance the PC only when slowclk is 1 
    if (slowclk){
      // set the content of pcreg to be its next value only when slowclk == 1
      pc.d = pcsel_out_sig;
    }

    // Task 2
    // RESET mux 
    case (rst){
      b0: pcsel_out_sig = pcsel_out_sig;
      b1: pcsel_out_sig = 32h80000000; // XAddr
      default: 
        pcsel_out_sig = 0;
    }
    
    // output connections
    ia = pc.q;
    pc_4 =  pc_4_sig;
    pc_4_sxtc = pc_4_sxtc_sig;
    pcsel_out = pcsel_out_sig;
  }
}